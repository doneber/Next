export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai){return {data:{"/javascript-for-frameworks/metodos-de-arreglos":[{title:J,_path:K,children:[{title:"EcmaScript y JS",_path:"\u002Fjavascript-for-frameworks\u002Fecmascript",seen:i},{title:"Operadores Ternarios",_path:"\u002Fjavascript-for-frameworks\u002Foperadores-ternarios",seen:i},{title:"Expresiones Vs Declaraciones",_path:"\u002Fjavascript-for-frameworks\u002Fexpresiones-vs-declaraciones",seen:i},{title:L,_path:M,seen:i},{title:"Objetos en JavaScript",_path:"\u002Fjavascript-for-frameworks\u002Fobjetos",seen:i},{title:"Json",_path:"\u002Fjavascript-for-frameworks\u002Fjson",seen:i},{title:"Modulos",_path:"\u002Fjavascript-for-frameworks\u002Fmodulos",seen:i},{title:"Asincronismo",_path:"\u002Fjavascript-for-frameworks\u002Fasincronismo",seen:i},{title:J,_path:K,icon:N,description:O,author:{name:P,url:Q}}],icon:N,description:O,author:{name:P,url:Q}}],"content-query-Evwx9Nn197":{_path:M,_dir:"javascript-for-frameworks",_draft:i,_partial:i,_locale:p,_empty:i,title:L,description:R,body:{type:"root",children:[{type:a,tag:q,props:{},children:[{type:c,value:R}]},{type:a,tag:y,props:{id:S},children:[{type:c,value:T}]},{type:a,tag:q,props:{},children:[{type:c,value:"El método push() se utiliza para agregar uno o más elementos al final de un arreglo. El método devuelve la nueva longitud del arreglo después de agregar los elementos. Por ejemplo, el siguiente código agrega el elemento \"manzana\" al final del arreglo \"frutas\":"}]},{type:a,tag:n,props:{code:"let frutas = [\"banana\", \"naranja\", \"kiwi\"];\nfrutas.push(\"manzana\");\nconsole.log(frutas); \u002F\u002F [\"banana\", \"naranja\", \"kiwi\", \"manzana\"]\n\n",language:z,meta:A},children:[{type:a,tag:B,props:{},children:[{type:a,tag:n,props:{__ignoreMap:p},children:[{type:a,tag:b,props:{class:f,line:C},children:[{type:a,tag:b,props:{class:r},children:[{type:c,value:s}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:t}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:D}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:E}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:F}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:G}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:H}]}]},{type:a,tag:b,props:{class:f,line:j},children:[{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:"push"}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:o}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:U}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:V}]}]},{type:a,tag:b,props:{class:f,line:I},children:[{type:a,tag:b,props:{class:e},children:[{type:c,value:u}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:v}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:o}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:w}]},{type:a,tag:b,props:{class:x},children:[{type:c,value:W}]}]}]}]}]},{type:a,tag:y,props:{id:X},children:[{type:c,value:Y}]},{type:a,tag:q,props:{},children:[{type:c,value:"El método pop() se utiliza para eliminar el último elemento de un arreglo y devuelve el elemento eliminado. Por ejemplo, el siguiente código elimina el último elemento del arreglo \"frutas\":"}]},{type:a,tag:n,props:{code:"let frutas = [\"banana\", \"naranja\", \"kiwi\"];\nlet ultimoElemento = frutas.pop();\nconsole.log(ultimoElemento); \u002F\u002F \"kiwi\"\nconsole.log(frutas); \u002F\u002F [\"banana\", \"naranja\"]\n\n",language:z,meta:A},children:[{type:a,tag:B,props:{},children:[{type:a,tag:n,props:{__ignoreMap:p},children:[{type:a,tag:b,props:{class:f,line:C},children:[{type:a,tag:b,props:{class:r},children:[{type:c,value:s}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:t}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:D}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:E}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:F}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:G}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:H}]}]},{type:a,tag:b,props:{class:f,line:j},children:[{type:a,tag:b,props:{class:r},children:[{type:c,value:s}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:t}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:Z}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:_}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:"pop"}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:$}]}]},{type:a,tag:b,props:{class:f,line:I},children:[{type:a,tag:b,props:{class:e},children:[{type:c,value:u}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:v}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:o}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:Z}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:w}]},{type:a,tag:b,props:{class:x},children:[{type:c,value:"\u002F\u002F \"kiwi\"\n"}]}]},{type:a,tag:b,props:{class:f,line:aa},children:[{type:a,tag:b,props:{class:e},children:[{type:c,value:u}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:v}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:o}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:w}]},{type:a,tag:b,props:{class:x},children:[{type:c,value:"\u002F\u002F [\"banana\", \"naranja\"]"}]}]}]}]}]},{type:a,tag:y,props:{id:ab},children:[{type:c,value:ac}]},{type:a,tag:q,props:{},children:[{type:c,value:"El método sort() se utiliza para ordenar los elementos de un arreglo en orden ascendente. Por defecto, el método ordena los elementos como cadenas de texto. Por ejemplo, el siguiente código ordena los elementos del arreglo \"frutas\" en orden alfabético:"}]},{type:a,tag:n,props:{code:"let frutas = [\"naranja\", \"banana\", \"kiwi\"];\nfrutas.sort();\nconsole.log(frutas); \u002F\u002F [\"banana\", \"kiwi\", \"naranja\"]\n\n",language:z,meta:A},children:[{type:a,tag:B,props:{},children:[{type:a,tag:n,props:{__ignoreMap:p},children:[{type:a,tag:b,props:{class:f,line:C},children:[{type:a,tag:b,props:{class:r},children:[{type:c,value:s}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:t}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:D}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:F}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:E}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:G}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:H}]}]},{type:a,tag:b,props:{class:f,line:j},children:[{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:"sort"}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:$}]}]},{type:a,tag:b,props:{class:f,line:I},children:[{type:a,tag:b,props:{class:e},children:[{type:c,value:u}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:v}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:o}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:w}]},{type:a,tag:b,props:{class:x},children:[{type:c,value:"\u002F\u002F [\"banana\", \"kiwi\", \"naranja\"]"}]}]}]}]}]},{type:a,tag:y,props:{id:ad},children:[{type:c,value:ae}]},{type:a,tag:q,props:{},children:[{type:c,value:"El método slice() se utiliza para copiar una parte de un arreglo y devuelve un nuevo arreglo con los elementos seleccionados. El método toma dos argumentos: el índice de inicio y el índice de fin (opcional). Si se omite el segundo argumento, el método copiará todos los elementos a partir del índice de inicio hasta el final del arreglo. Por ejemplo, el siguiente código copia los elementos del arreglo \"frutas\" desde el índice 1 hasta el índice 2:"}]},{type:a,tag:n,props:{code:"let frutas = [\"banana\", \"naranja\", \"kiwi\", \"manzana\"];\nlet nuevaFruta = frutas.slice(1, 3);\nconsole.log(nuevaFruta); \u002F\u002F [\"naranja\", \"kiwi\"]\nconsole.log(frutas); \u002F\u002F [\"banana\", \"naranja\", \"kiwi\", \"manzana\"]\n\n",language:z,meta:A},children:[{type:a,tag:B,props:{},children:[{type:a,tag:n,props:{__ignoreMap:p},children:[{type:a,tag:b,props:{class:f,line:C},children:[{type:a,tag:b,props:{class:r},children:[{type:c,value:s}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:t}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:D}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:E}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:F}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:G}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:g},children:[{type:c,value:U}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:H}]}]},{type:a,tag:b,props:{class:f,line:j},children:[{type:a,tag:b,props:{class:r},children:[{type:c,value:s}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:t}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:af}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:_}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:"slice"}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:o}]},{type:a,tag:b,props:{class:ag},children:[{type:c,value:"1"}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:k}]},{type:a,tag:b,props:{class:ag},children:[{type:c,value:"3"}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:V}]}]},{type:a,tag:b,props:{class:f,line:I},children:[{type:a,tag:b,props:{class:e},children:[{type:c,value:u}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:v}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:o}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:af}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:w}]},{type:a,tag:b,props:{class:x},children:[{type:c,value:"\u002F\u002F [\"naranja\", \"kiwi\"]\n"}]}]},{type:a,tag:b,props:{class:f,line:aa},children:[{type:a,tag:b,props:{class:e},children:[{type:c,value:u}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:l}]},{type:a,tag:b,props:{class:m},children:[{type:c,value:v}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:o}]},{type:a,tag:b,props:{class:e},children:[{type:c,value:h}]},{type:a,tag:b,props:{class:d},children:[{type:c,value:w}]},{type:a,tag:b,props:{class:x},children:[{type:c,value:W}]}]}]}]}]},{type:a,tag:y,props:{id:ah},children:[{type:c,value:ai}]},{type:a,tag:q,props:{},children:[{type:c,value:"En este artículo, hemos discutido cuatro métodos comunes de arreglos en JavaScript: push(), pop(), sort(), y slice(). Estos métodos son muy útiles para manipular arreglos y pueden ahorrar mucho tiempo y esfuerzo al programar. A medida que se familiarice más con los arreglos en JavaScript, descubrirá muchos otros métodos útiles que pueden ayudarlo a escribir código más eficiente. ¡Sigue aprendiendo!"}]},{type:a,tag:"style",children:[{type:c,value:".ct-d3886b{color:#B5CEA8}\n.ct-683375{color:#6A9955}\n.ct-152579{color:#DCDCAA}\n.ct-953c4e{color:#CE9178}\n.ct-565998{color:#9CDCFE}\n.ct-f88696{color:#D4D4D4}\n.ct-b4bb4d{color:#569CD6}"}]}],toc:{title:p,searchDepth:j,depth:j,links:[{id:S,depth:j,text:T},{id:X,depth:j,text:Y},{id:ab,depth:j,text:ac},{id:ad,depth:j,text:ae},{id:ah,depth:j,text:ai}]}},_type:"markdown",_id:"content:1.JavaScript-for-frameworks:4.metodos-de-arreglos.md",_source:"content",_file:"1.JavaScript-for-frameworks\u002F4.metodos-de-arreglos.md",_extension:"md"}},prerenderedAt:1683086926234}}("element","span","text","ct-f88696","ct-565998","line","ct-953c4e","frutas",false,2,", ",".","ct-152579","code","(","","p","ct-b4bb4d","let"," ","console","log","); ","ct-683375","h2","jsx",null,"pre",1," = [","\"banana\"","\"naranja\"","\"kiwi\"","];\n",3,"JavaScript para aprender un Framework","\u002Fjavascript-for-frameworks","Metodos De Arreglos","\u002Fjavascript-for-frameworks\u002Fmetodos-de-arreglos","🤍","Aprende los conceptos necesarios para empezar a usar un framework basado en JavaScript, en este caso Vue.","@doneber","https:\u002F\u002Fgithub.com\u002Fdoneber","Los arreglos son una estructura de datos importante en JavaScript y se utilizan para almacenar una colección de elementos. JavaScript proporciona varios métodos incorporados para manipular arreglos. En este artículo, discutiremos cuatro métodos de arreglos en JavaScript que son comúnmente utilizados.","método-1-push","Método 1: push()","\"manzana\"",");\n","\u002F\u002F [\"banana\", \"naranja\", \"kiwi\", \"manzana\"]","método-2-pop","Método 2: pop()","ultimoElemento"," = ","();\n",4,"método-3-sort","Método 3: sort()","método-4-slice","Método 4: slice()","nuevaFruta","ct-d3886b","conclusión","Conclusión"))